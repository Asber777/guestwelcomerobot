//这里存放未完成程序demo

//线路规划好后，通过查表可知不同点到不同路径，需要走左边还是中间还是右边
//该函数的实现需要openMV牺牲速度来在终点检测三个脚印，未测试摄像头效果

void PointToPoint(int nowpoint,int aimpoint)
{
	while(IntersectionChoice(aimpoint));//yi开始的路线选择
	//跳出之后代表可以走脚印了,发送一个数据给openMV，叫他执行寻脚印模式（也能寻到终点标志）
	//这时候需要写这样的函数，判断起点是否离开了，若起点离开了，endpoint=0
	//然后若是串口再次检测到终点标志，就是终点了，然后进入GoToTerminus函数
}

int ChoiceBranch(void)//路径选择，通过openMV放回斜率进行左右方向调节
{
	
	
	
//注意 这里PID之后要观察数据，如果斜率回归到0，并且时间足够长，那么便不再进行PID调节，开始走脚印
	//此处应该有防抖的容错机制，如果满足条件，变不再pid，放回0，打破while循环，否则继续pid，放回1
	
	
}






int receivedflag;//该数值要在串口中断中被改变
//用于判断所需要走的支路是左中还是右，并且发给OPENMV数据，是计算x轴最小的脚掌，还是第二小的，还是最大的――对应左中右方向的斜率（然后PID调节，使得斜率为0，即转向到所选路径）
void IntersectionSelectOKcheck(int nowpoint,int terminus)
{
	//查表，查intersection_direction，
	{
	
	}
	//串口发数据告诉openMV左边还是右边还是中间 -1 1 0 ，不断发送，直到openMV传回口令“received” 串口协议里改变receivedflag的值
	while(1)
	{
	
	if(receivedflag)break;
	}
	
}


//路线选择函数
//当你开始执行函数的时候，先给openMV发送读取线路的指令，若是成功，openMV会发回来一个校验数据，在串口会检测到（还没写），然后通过斜率进行转向
//大体思路：openMV起点路口检测请求，openMV（usart.read）收到后返回校验字符串（比如“received”）然后openMV开始不断检测脚印的x值，
//传回的x值的个数要进行匹配，因为有可能出现三个分支但是只检测到两个x值的情况，通过x值匹配了，单片机再次发送数据，然后openMV接受之后进行斜率计算
//单片机接受传回的斜率，进行PID调节人的转向
int nowpoint=101;
int selectOKflag = 0;
int IntersectionChoice(int aimpoint)
{
	//需要一开始在起点endpoint被置一的情况下进行路线选择，endpoint没有置一表示还未走完上一段路
	if(endpoint&&(!selectOKflag))
	{
		//检测支路数是否正确,
		if(BranchNumCheckOKcheck(nowpoint))
		{
		IntersectionSelectOKcheck(nowpoint,aimpoint);//openMV接收到之后发送received并且不断发送斜率数据，MV和串口协议还未写
		selectOKflag = 1;
		}
		else
		{
		
		}
	}
	if(receivedflag==1)
	{
	while(ChoiceBranch());//根据数据不断的调试PID
		//跳出while便是PID调节成功，路线选择正确,return 0
		selectOKflag=0;
		return 0;
	}
	return 1;

}
